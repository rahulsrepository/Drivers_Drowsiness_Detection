# -*- coding: utf-8 -*-
"""driver drowsiness detection

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Yjex8oAKte4yIZu91YXjJLsZLlR7pa0y
"""

from keras.models import Sequential
from keras.layers import MaxPool2D,Dropout,BatchNormalization,Dense,Conv2D,Flatten
import numpy as np
import glob
from PIL import Image
import matplotlib.pyplot as plt
from keras.preprocessing.image import ImageDataGenerator

s=Image.open('/content/drive/MyDrive/DL Practice/driver drowsiness detection/data/dataset_new/test/Closed/_719.jpg')

n=np.asarray(s)
n=np.array(n)
n.shape

plt.imshow(n)



train_datagen=ImageDataGenerator(rescale=1./255,
                                 shear_range=0.2,
                                 zoom_range=0.2,
                                horizontal_flip=True)

test_datagen=ImageDataGenerator(rescale=1./255)

train_dataset=train_datagen.flow_from_directory(directory='/content/drive/MyDrive/DL Practice/driver drowsiness detection/data/dataset_new/train',
                                                target_size=(24,24),
                                                batch_size=32,
                                                class_mode='categorical')

test_dataset=test_datagen.flow_from_directory('/content/drive/MyDrive/DL Practice/driver drowsiness detection/data/dataset_new/test',
                                             target_size=(24,24),
                                               batch_size=32,
                                               class_mode='categorical')

folders=glob.glob('/content/drive/MyDrive/DL Practice/driver drowsiness detection/data/dataset_new/train/*')
len(folders)

folders

model=Sequential()

model.add(Conv2D(filters=32,kernel_size=(3,3),activation='relu',input_shape=(24,24,3)))

model.add(MaxPool2D(pool_size=(1,1)))

model.add(Conv2D(32,(3,3),activation='relu'))

model.add(MaxPool2D(pool_size=(1,1)))

model.add(Conv2D(64,(3,3),activation='relu'))

model.add(MaxPool2D((1,1)))

model.add(Dropout(0.25))

model.add(Flatten())

model.add(Dense(128,activation='relu'))

model.add(Dropout(0.25))

model.add(Dense(2,activation='softmax'))

model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])

model.summary()

model.fit_generator(train_dataset, validation_data=test_dataset,epochs=15,steps_per_epoch=len(train_dataset) ,validation_steps=len(test_dataset))